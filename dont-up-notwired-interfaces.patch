 2007-06-21  Dan Williams  <dcbw@redhat.com>
 
	More fixes for Fedora #194124, gnome.org #354565

	* src/nm-device-802-3-ethernet.c
		- (real_act_stage1_prepare): new function; fail activation if device
			doesn't have a link

	* src/NetworkManagerPolicy.c
		- (nm_policy_activation_finish): ensure device is actually activated
			before sending out signals.  Fixes a race where device cancellation
			would be processed right after finish was scheduled, but not run.
		- (nm_policy_device_change_check, nm_policy_schedule_device_change_check):
			ensure device change check GSource ID is locked across threads;
			allow interruption of activation of 802.3 ethernet devices that no
			longer have an active link, and ensure that 802.3 ethernet devices
			have an active link before starting activation

--

Index: bzr.debian.0.9.5/src/nm-device-802-3-ethernet.c
===================================================================
--- bzr.debian.0.9.5/src/nm-device-802-3-ethernet.c	(revision 2604)
+++ bzr.debian.0.9.5.new/src/nm-device-802-3-ethernet.c	(revision 2605)
@@ -207,6 +207,26 @@
 	return caps;
 }
 
+
+static NMActStageReturn
+real_act_stage1_prepare (NMDevice *dev, NMActRequest *req)
+{
+	NMDevice8023Ethernet * self = NM_DEVICE_802_3_ETHERNET (dev);
+	NMDevice8023EthernetClass *	klass;
+	NMDeviceClass * parent_class;
+
+	/* Ensure ethernet devices have a link before going further with activation,
+	 * partially works around Fedora #194124.
+	 */
+	if (!nm_device_has_active_link (dev))
+		return NM_ACT_STAGE_RETURN_FAILURE;
+
+	/* Chain up to parent */
+	klass = NM_DEVICE_802_3_ETHERNET_GET_CLASS (self);
+	parent_class = NM_DEVICE_CLASS (g_type_class_peek_parent (klass));
+	return parent_class->act_stage1_prepare (dev, req);
+}
+
 static void
 nm_device_802_3_ethernet_dispose (GObject *object)
 {
@@ -271,6 +291,7 @@
 	parent_class->get_generic_capabilities = real_get_generic_capabilities;
 	parent_class->init = real_init;
 	parent_class->update_link = real_update_link;
+	parent_class->act_stage1_prepare = real_act_stage1_prepare;
 
 	g_type_class_add_private (object_class, sizeof (NMDevice8023EthernetPrivate));
 }
Index: src/NetworkManagerPolicy.c
===================================================================
--- bzr.debian.0.9.5/src/NetworkManagerPolicy.c	(revision 2604)
+++ bzr.debian.0.9.5.new/src/NetworkManagerPolicy.c	(revision 2605)
@@ -52,6 +52,7 @@
 	NMDevice			*dev = NULL;
 	NMData			*data = NULL;
 	NMAccessPoint *	ap = NULL;
+	NMActRequest * dev_req;
 
 	g_return_val_if_fail (req != NULL, FALSE);
 
@@ -61,6 +62,13 @@
 	dev = nm_act_request_get_dev (req);
 	g_assert (dev);
 
+	/* Ensure that inactive devices don't get the activated signal
+	 * sent due to race conditions.
+	 */
+	dev_req = nm_device_get_act_request (dev);
+	if (!dev_req || (dev_req != req))
+		return FALSE;
+
     if (nm_device_is_802_11_wireless (dev))
         ap = nm_act_request_get_ap (req);
 
@@ -265,14 +273,16 @@
 	}
 
 #if 0
-	nm_info ("AUTO: Best wired device = %s, best wireless device = %s (%s)", best_wired_dev ? nm_device_get_iface (best_wired_dev) : "(null)",
-			best_wireless_dev ? nm_device_get_iface (best_wireless_dev) : "(null)", (best_wireless_dev && *ap) ? nm_ap_get_essid (*ap) : "null" );
+	nm_info ("AUTO: Best wired device = %s, best wireless device = %s (%s)", best_wired_dev ? nm_device_get_iface (NM_DEVICE (best_wired_dev)) : "(null)",
+			best_wireless_dev ? nm_device_get_iface (NM_DEVICE (best_wireless_dev)) : "(null)", (best_wireless_dev && *ap) ? nm_ap_get_essid (*ap) : "null" );
 #endif
 
 	return highest_priority_dev;
 }
 
 
+static GStaticMutex dcc_mutex = G_STATIC_MUTEX_INIT;
+
 /*
  * nm_policy_device_change_check
  *
@@ -294,7 +304,9 @@
 
 	g_return_val_if_fail (data != NULL, FALSE);
 
+	g_static_mutex_lock (&dcc_mutex);
 	data->dev_change_check_idle_id = 0;
+	g_static_mutex_unlock (&dcc_mutex);
 
 	old_dev = nm_get_active_device (data);
 
@@ -303,11 +315,19 @@
 
 	if (old_dev)
 	{
+		gboolean has_link = TRUE;
 		guint32 caps = nm_device_get_capabilities (old_dev);
 
+		/* Ensure ethernet devices have a link before starting activation,
+		 * partially works around Fedora #194124.
+		 */
+		if (nm_device_is_802_3_ethernet (old_dev))
+			has_link = nm_device_has_active_link (old_dev);
+
 		/* Don't interrupt a currently activating device. */
 		if (   nm_device_is_activating (old_dev)
-		    && !nm_device_can_interrupt_activation (old_dev))
+		    && !nm_device_can_interrupt_activation (old_dev)
+		    && has_link)
 		{
 			nm_info ("Old device '%s' activating, won't change.", nm_device_get_iface (old_dev));
 			goto out;
@@ -425,13 +445,36 @@
 	if (do_switch && (nm_device_is_802_3_ethernet (new_dev) || (nm_device_is_802_11_wireless (new_dev) && ap)))
 	{
 		NMActRequest *	act_req = NULL;
+		gboolean has_link = TRUE;
 
-		if ((act_req = nm_act_request_new (data, new_dev, ap, FALSE)))
+		/* Ensure ethernet devices have a link before starting activation,
+		 * partially works around Fedora #194124.
+		 */
+		if (nm_device_is_802_3_ethernet (new_dev))
+			has_link = nm_device_has_active_link (new_dev);
+
+		if (has_link)
 		{
-			nm_info ("Will activate connection '%s%s%s'.", nm_device_get_iface (new_dev), ap ? "/" : "", ap ? nm_ap_get_essid (ap) : "");
-			nm_policy_schedule_device_activation (act_req);
-			nm_act_request_unref (act_req);
+			if ((act_req = nm_act_request_new (data, new_dev, ap, FALSE)))
+			{
+				nm_info ("Will activate connection '%s%s%s'.",
+				         nm_device_get_iface (new_dev),
+				         ap ? "/" : "",
+				         ap ? nm_ap_get_essid (ap) : "");
+				nm_policy_schedule_device_activation (act_req);
+				nm_act_request_unref (act_req);
+			}
+			else
+			{
+				nm_info ("Error creating activation request for %s",
+				         nm_device_get_iface (new_dev));
+			}
 		}
+		else
+		{
+			nm_info ("Won't activate %s because it no longer has a link.",
+			         nm_device_get_iface (new_dev));
+		}
 	}
 
 	if (ap)
@@ -452,11 +495,9 @@
  */
 void nm_policy_schedule_device_change_check (NMData *data)
 {
-	static GStaticMutex mutex = G_STATIC_MUTEX_INIT;
-
 	g_return_if_fail (data != NULL);
 
-	g_static_mutex_lock (&mutex);
+	g_static_mutex_lock (&dcc_mutex);
 
 	if (data->dev_change_check_idle_id == 0)
 	{
@@ -466,8 +507,7 @@
 		data->dev_change_check_idle_id = g_source_attach (source, data->main_context);
 		g_source_unref (source);
 	}
-
-	g_static_mutex_unlock (&mutex);
+	g_static_mutex_unlock (&dcc_mutex);
 }
 
 
